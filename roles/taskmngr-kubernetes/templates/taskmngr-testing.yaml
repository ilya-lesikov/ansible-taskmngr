apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: taskmngr-nginx-ingress
  labels:
    app: taskmngr
  namespace: testing
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/ssl-passthrough: "true"
    # ingress.kubernetes.io/force-ssl-redirect: "false"
    # ingress.kubernetes.io/ssl-redirect: "false"
spec:
  # tls:
  #   - secretName: tls-secret
  #     hosts:
  #       - "taskmngr1"
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: taskmngr
              servicePort: 8000
      host: "testing.taskmngr1"

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: static-files-pv-testing
  labels:
    app: taskmngr
    type: local
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/pv/static-files"

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-data-pv-testing
  labels:
    app: taskmngr
    type: local
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/pv/postgres-data"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: static-files-pvc
  namespace: testing
  labels:
    app: taskmngr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: testing
  labels:
    app: taskmngr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
    name: nginx-conf
    namespace: testing
    labels:
      app: taskmngr
data:
    django1.conf: |
        proxy_redirect off;

        upstream django {
            server 127.0.0.1:8001;
        }

        server {
            listen 8000 default_server ssl;
            server_name taskmngr1;

            ssl_certificate /certs/tls.crt;
            ssl_certificate_key /certs/tls.key;

            include /etc/nginx/proxy_params;

            location / {
                proxy_pass http://django/;
            }

            location /static {
                autoindex on;
                alias /static;
            }
        }
    proxy_params: |
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;

---

apiVersion: v1
kind: Service
metadata:
    labels:
        app: taskmngr
    name: taskmngr
    namespace: testing
spec:
    ports:
        - name: postfix
          port: 25
        - name: nginx
          port: 8000
        - name: django
          port: 8001
        - name: postgres
          port: 5432
    selector:
        app: taskmngr

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
    labels:
        app: taskmngr
    name: taskmngr
    namespace: testing
spec:
    replicas: 1
    template:
        metadata:
            labels:
                app: taskmngr
        spec:
            containers:
                - image: catatnight/postfix
                  name: postfix
                  ports:
                      - containerPort: 25
                  # resources:
                  #     limits:
                  #         cpu: 150m
                  env:
                      - name: maildomain
                        value: mail.example.com
                      - name: smtp_user
                        value: postfix-user:1
                - image: sameersbn/postgresql
                  name: postgres
                  # command: ["/bin/sh"]
                  # args: ["/bin/sh", "-c", "while true; do sleep 5; done"]
                  ports:
                      - containerPort: 5432
                  volumeMounts:
                      - name: postgres-data
                        mountPath: /var/lib/postgresql/data
                  # resources:
                  #     limits:
                  #         cpu: 150m
                - image: nginx
                  name: nginx
                  ports:
                      - containerPort: 8000
                  volumeMounts:
                      - name: nginx-django-conf
                        mountPath: /etc/nginx/conf.d/django1.conf
                        subPath: django1.conf
                      - name: nginx-proxy-conf
                        mountPath: /etc/nginx/proxy_params
                        subPath: proxy_params
                      - name: static-files
                        mountPath: /static
                      - name: tls-secret
                        mountPath: /certs
                        readOnly: true
                  # resources:
                  #     limits:
                  #         cpu: 150m
                - image: taskmngr1:5000/taskmngr-django:{{ app_version.stdout }}.{{ git_commit_sha.stdout }}
                  name: django
                  imagePullPolicy: Always
                  command: ["/bin/sh"]
                  args: ["-c", "python manage.py collectstatic --no-input && python manage.py makemigrations && chown -R root:root /static && chmod -R 755 /static && python manage.py migrate && gunicorn taskmngr.wsgi -b 0.0.0.0:8001 --timeout 120"]
                  #args: ["-c", "while true; do sleep 5; done"]
                  ports:
                      - containerPort: 8001
                  volumeMounts:
                      - name: static-files
                        mountPath: /static
                  # resources:
                  #     limits:
                  #         cpu: 200m
            volumes:
                - name: tls-secret
                  secret:
                      secretName: tls-secret
                - name: nginx-django-conf
                  configMap:
                      name: nginx-conf
                      items:
                          - key: django1.conf
                            path: django1.conf
                - name: nginx-proxy-conf
                  configMap:
                      name: nginx-conf
                      items:
                          - key: proxy_params
                            path: proxy_params
                - name: static-files
                  persistentVolumeClaim:
                      claimName: static-files-pvc
                - name: postgres-data
                  persistentVolumeClaim:
                      claimName: postgres-data-pvc
    selector:
        matchLabels:
            app: taskmngr
