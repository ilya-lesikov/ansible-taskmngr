# apiVersion: v1
# kind: Namespace
# metadata:
#   name: taskmngr
#   labels:
#     app: taskmngr

# ---

apiVersion: v1
kind: ResourceQuota
metadata:
  name: taskmngr-quota
spec:
  hard:
    requests.cpu: "0.7"
    limits.cpu: "1.5"
    requests.memory: 300Mi
    limits.memory: 600Mi

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: default-add-on-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: add-on-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: kube-system

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: static-files-pv
  namespace: default
  labels:
    app: taskmngr
    type: local
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/pv/static-files"

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-data-pv
  namespace: default
  labels:
    app: taskmngr
    type: local
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/pv/postgres-data"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: static-files-pvc
  namespace: default
  labels:
    app: taskmngr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: default
  labels:
    app: taskmngr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
    name: nginx-conf
    namespace: default
    labels:
      app: taskmngr
data:
    django1.conf: |
        proxy_redirect off;

        upstream django {
            # ip_hash;
            server 127.0.0.1:8001;
        }

        # server {
        #     listen 8000;
        #     server_name taskmngr1;
        #     return 301 https://$host$request_uri;
        # }

        server {
            # listen 8000;
            listen 8000 default ssl;
            server_name taskmngr1;

            # ssl on;
            ssl_certificate /certs/tls.crt;
            ssl_certificate_key /certs/tls.key;
            # ssl_session_cache    shared:SSL:1m;
            # ssl_session_timeout  10m;
            # ssl_verify_client off;
            # proxy_ssl_session_reuse off;
            # ssl_protocols        TLSv1.2;
            # ssl_ciphers RC4:HIGH:!aNULL:!MD5;
            # proxy_ssl_protocols        TLSv1.2;
            # proxy_ssl_ciphers RC4:HIGH:!aNULL:!MD5;
            # ssl_prefer_server_ciphers on;

            include /etc/nginx/proxy_params;

            location / {
                proxy_pass http://django/;
            }

            location /static {
                autoindex on;
                alias /static;
            }
        }
    proxy_params: |
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;

---

apiVersion: v1
kind: Service
metadata:
    labels:
        app: taskmngr
    name: taskmngr
    namespace: default
spec:
    ports:
        - name: postfix
          port: 25
          # nodePort: 30025
        - name: nginx
          port: 8000
          # nodePort: 30080
        - name: django
          port: 8001
          # nodePort: 30081
        - name: postgres
          port: 5432
          # nodePort: 30032
    selector:
        app: taskmngr
    # type: NodePort

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
    labels:
        app: taskmngr
    name: taskmngr
    namespace: default
spec:
    replicas: 1
    template:
        metadata:
            labels:
                app: taskmngr
        spec:
            containers:
                - image: catatnight/postfix
                  name: postfix
                  ports:
                      - containerPort: 25
                  # resources:
                  #     limits:
                  #         cpu: 150m
                  env:
                      - name: maildomain
                        value: mail.example.com
                      - name: smtp_user
                        value: postfix-user:1
                - image: sameersbn/postgresql
                  name: postgres
                  # command: ["/bin/sh"]
                  # args: ["/bin/sh", "-c", "while true; do sleep 5; done"]
                  ports:
                      - containerPort: 5432
                  volumeMounts:
                      - name: postgres-data
                        mountPath: /var/lib/postgresql/data
                  # resources:
                  #     limits:
                  #         cpu: 150m
                - image: nginx
                  name: nginx
                  ports:
                      - containerPort: 8000
                  volumeMounts:
                      - name: nginx-django-conf
                        mountPath: /etc/nginx/conf.d/django1.conf
                        subPath: django1.conf
                      - name: nginx-proxy-conf
                        mountPath: /etc/nginx/proxy_params
                        subPath: proxy_params
                      - name: static-files
                        mountPath: /static
                      - name: tls-secret
                        mountPath: /certs
                        readOnly: true
                  # resources:
                  #     limits:
                  #         cpu: 150m
                - image: taskmngr1:5000/taskmngr-django
                  name: django
                  imagePullPolicy: Always
                  command: ["/bin/sh"]
                  args: ["-c", "python manage.py collectstatic --no-input && python manage.py makemigrations && chown -R root:root /static && chmod -R 755 /static && python manage.py migrate && gunicorn taskmngr.wsgi -b 0.0.0.0:8001 --timeout 120"]
                  #args: ["-c", "while true; do sleep 5; done"]
                  ports:
                      - containerPort: 8001
                  volumeMounts:
                      - name: static-files
                        mountPath: /static
                  # resources:
                  #     limits:
                  #         cpu: 200m
            volumes:
                - name: tls-secret
                  secret:
                      secretName: tls-secret
                - name: nginx-django-conf
                  configMap:
                      name: nginx-conf
                      items:
                          - key: django1.conf
                            path: django1.conf
                - name: nginx-proxy-conf
                  configMap:
                      name: nginx-conf
                      items:
                          - key: proxy_params
                            path: proxy_params
                - name: static-files
                  persistentVolumeClaim:
                      claimName: static-files-pvc
                - name: postgres-data
                  persistentVolumeClaim:
                      claimName: postgres-data-pvc
    selector:
        matchLabels:
            app: taskmngr
