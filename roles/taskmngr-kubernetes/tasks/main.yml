---

- name: install git
  yum:
    name: git
    state: present
  when: app_checkout or app_build or app_deploy_testing or app_deploy_prod

- name: get app from git
  git:
    repo: '{{ app_git }}'
    dest: '{{ app_repo_local_path }}'
    force: true
    version: master
  when: app_checkout

- name: get app version
  shell: "grep -E '^APP_VERSION' {{ app_settings_path }} | cut -d\\' -f2"
  register: app_version
  failed_when: app_version.stdout == '' or app_version.rc > 0
  when: app_build or app_deploy_testing or app_deploy_prod

- name: get commit sha
  shell: |
    cd {{ app_repo_local_path }}
    git rev-parse HEAD | cut -c -6
  register: git_commit_sha
  when: app_build or app_deploy_testing or app_deploy_prod

- name: save git revision in django settings
  lineinfile:
    path: "{{ app_settings_path }}"
    regexp: "^APP_REVISION_SHORT"
    line: "APP_REVISION_SHORT = '{{ git_commit_sha.stdout }}'"
  when: app_build

- name: build and push app container
  docker_image:
    path: "{{ app_dockerfile_path }}"
    name: "{{ app_container_name }}"
    tag: "{{ app_version.stdout }}.{{ git_commit_sha.stdout }}"
    repository: "{{ docker_repo_uri }}/{{ app_container_name }}"
    push: yes
    force: yes    # HACK: sometimes doesn't build
  when: app_build

- name: copy app config files to remote host
  template:
    src: "{{ item[0] }}"
    dest: "{{ item[1] }}"
  with_nested:
    - "{{ app_kube_configs }}"
    - "{{ kube_app_configs_dir }}"
  when: app_deploy_testing or app_deploy_prod or app_build

- name: delete ingress services from cluster
  shell: "kubectl delete all --ignore-not-found -n {{ item.namespace_name }} -l {{ item.label_name }}={{ item.label_value }}"
  with_items:
    - "{{ ingress_namespace.backend }}"
    - "{{ ingress_namespace.controller }}"
  when: "force_ingress and (app_deploy_testing or app_deploy_prod)"

- name: delete common app services from cluster
  shell: "kubectl delete all --ignore-not-found -n {{ item }} -l {{ app_common_label.name }}={{ app_common_label.value }}"
  with_items:
    - all_namespaces
  when: "(force_testing_app or force_prod_app) and (app_deploy_testing or app_deploy_prod)"

- name: delete application services from testing cluster
  shell: "kubectl delete all --ignore-not-found -n {{ app_namespaces.testing }} -l {{ app_label.name }}={{ app_label.value }}"
  when: force_testing_app and app_deploy_testing

- name: delete application services from production cluster
  shell: "kubectl delete all --ignore-not-found -n {{ app_namespaces.production }} -l {{ app_label.name }}={{ app_label.value }}"
  when: force_prod_app and app_deploy_prod

- name: apply ingress configs in cluster
  shell: "kubectl apply -f {{ item[0] }}{{ item[1] }}"
  with_nested: ["{{ kube_app_configs_dir }}", "{{ app_configs.ingress }}"]
  when: app_deploy_testing or app_deploy_prod

- name: apply common app configs in cluster
  shell: "kubectl apply -f {{ item[0] }}{{ item[1] }}"
  with_nested: ["{{ kube_app_configs_dir }}", "{{ app_configs.common }}"]
  when: app_deploy_testing or app_deploy_prod or app_build
  # when: app_deploy_testing or app_deploy_prod or app_build

- name: delete secret tls
  shell: "kubectl delete secret {{ kube_tls_secret_name }} -n {{ item }}"
  with_items: "{{ kube_tls_secret_namespaces }}"
  failed_when: false
  when: (app_deploy_testing or app_deploy_prod or app_build) and force_create_cert

- name: create secret tls
  shell: "kubectl create secret tls {{ kube_tls_secret_name }} --key {{ kube_tls_key_path }} --cert {{ kube_tls_cert_path }} -n {{ item }}"
  with_items: "{{ kube_tls_secret_namespaces }}"
  register: create_secret
  when: app_deploy_testing or app_deploy_prod or app_build
  failed_when: "('already exists' not in create_secret.stderr) and create_secret.rc > 0"

- name: apply app configs in testing
  shell: "kubectl apply -f {{ item[0] }}{{ item[1] }}"
  with_nested: ["{{ kube_app_configs_dir }}", "{{ app_configs.testing }}"]
  when: app_deploy_testing

# - name: wait until database is ready
#   wait_for:
#     port: 5432
#   when: app_test

- pause:
    seconds: 15
  when: app_deploy_testing and app_test

- name: get first running pod name in testing
  shell: "kubectl get pods -n {{ app_namespaces.testing }} --no-headers | grep -v Terminating | head -n1 | cut -d' ' -f1"
  register: testing_pod
  failed_when: testing_pod.stdout == ''
  when: app_test

- name: wait until all containers started
  shell: "kubectl get pod -n {{ app_namespaces.testing }} {{ testing_pod.stdout }} | grep Running"
  register: testing_up
  until: testing_up.stdout != ''
  retries: 35
  delay: 10
  when: app_test

- name: run tests in testing
  shell: "kubectl exec -n {{ app_namespaces.testing }} {{ testing_pod.stdout }} -c django -- sh -c 'cd /django && python manage.py test'"
  register: tests
  until: "('container not found') not in tests.stderr and ('database system is shutting down') not in tests.stderr"
  retries: 10
  delay: 10
  when: app_test

- name: apply app configs in production
  shell: "kubectl apply -f {{ item[0] }}{{ item[1] }}"
  with_nested: ["{{ kube_app_configs_dir }}", "{{ app_configs.production }}"]
  when: app_deploy_prod
